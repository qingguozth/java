package qrcode;

import java.awt.BasicStroke;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Shape;
import java.awt.geom.RoundRectangle2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;
import javax.imageio.ImageIO;
 
import com.google.zxing.BarcodeFormat;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.DecodeHintType;
import com.google.zxing.EncodeHintType;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.MultiFormatWriter;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.common.HybridBinarizer;
import com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;
/**
 * 二维码生成工具
 * @author 
 *
 */
public class Qrcode1 {
 
	private static final String CHARSET = "utf-8";
	private static final String FORMAT_NAME = "JPG";
	// 二维码尺寸
	private static final int QRCODE_SIZE = 300;
	// LOGO宽度
	private static final int WIDTH = 60;
	// LOGO高度
	private static final int HEIGHT = 60; 
	
 
	/**
	 * 生成二维码
	 * @param content	源内容
	 * @param imgPath	logo图片的路径
	 * @param needCompress	是否要压缩
	 * @return		返回二维码图片
	 * @throws Exception
	 */
	private static BufferedImage createImage(String content, String imgPath, boolean needCompress) throws Exception {
		Map<EncodeHintType, Object> hints = new HashMap<EncodeHintType, Object>();//
		hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H);//容错等级为H，30%的矫正率
		hints.put(EncodeHintType.CHARACTER_SET, CHARSET);//utf-8编码
		hints.put(EncodeHintType.MARGIN, 1);
		BitMatrix bitMatrix = new MultiFormatWriter().encode(content, BarcodeFormat.QR_CODE, QRCODE_SIZE, QRCODE_SIZE,
				hints);
		int width = bitMatrix.getWidth(); 
		int height = bitMatrix.getHeight();
		BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
		for (int x = 0; x < width; x++) {
			for (int y = 0; y < height; y++) {
				image.setRGB(x, y, bitMatrix.get(x, y) ? 0xFF000000 : 0xFFFFFFFF);
			}
		}
		if (imgPath == null || "".equals(imgPath)) {
			return image;
		}
		// 插入图片
		Qrcode1.insertImage(image, imgPath, needCompress);
		return image;
	}
	/*首先这个方法接收三个参数，这三个参数分别表示生成二维码的文本内容（你要把哪一个文本用二维码图片表示出来），第二个和第三个参数
	 *分别表示生成的二维码保存的路径和二维码的logo是否要压缩。	 
	 * 
	 * MultiFormatWriter()中有一个方法叫做encode，通过该方法对文本内容进行编码，该方法共有五个参数，第一个参数表示生成二维码的文本内容，
	 * 第二个参数表示编码格式，第三个参数表示生成的二维码的宽度，第四个参数表示生成的二维码的高度，第五个参数可选，可以用来设置文本的编码，
	 *encode方法的返回值是一个BitMatrix，你可以把BitMatrix理解成一个二维数组，这个二维数组的每一个元素都表示一个像素点是否有数据
	 *
	 *
	 *接下来将BitMatrix转换成在内存中图片的存在形式BufferedImage，存在image中。
	 *
	 *imgPath为空或者imgPath不为空但路径里没这这个照片logo，则生成物logo的二维码。
	 *否则添加logo
	 *
	 */
 
	/**
	 * 在生成的二维码中插入图片
	 * @param source 生成的二维码
	 * @param imgPath 路径
	 * @param needCompress
	 * @throws Exception
	 */
	private static void insertImage(BufferedImage source, String imgPath, boolean needCompress) throws Exception {
		File file = new File(imgPath);
		if (!file.exists()) {
			System.err.println("" + imgPath + "   该文件不存在！");
			return;
		}
		Image src = ImageIO.read(file);//
		int width = src.getWidth(null); 
		int height = src.getHeight(null);
		if (needCompress) { // 压缩LOGO
			if (width > WIDTH) {//判断logo的宽是否大于规定的logo的宽度
				width = WIDTH;
			}
			if (height > HEIGHT) {
				height = HEIGHT;
			}
			Image image = src.getScaledInstance(width, height, Image.SCALE_SMOOTH);//创建此图像的缩放版本
			BufferedImage tag = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
			Graphics g = tag.getGraphics();
			g.drawImage(image, 0, 0, null); // 绘制缩小后的图
			g.dispose();
			src = image;
		}
		// 插入LOGO
		Graphics2D graph = source.createGraphics();
		int x = (QRCODE_SIZE - width) / 2;
		int y = (QRCODE_SIZE - height) / 2;
		graph.drawImage(src, x, y, width, height, null);
		Shape shape = new RoundRectangle2D.Float(x, y, width, width, 6, 6);
		graph.setStroke(new BasicStroke(3f));
		graph.draw(shape);
		graph.dispose();
	}
 
	/**
	 * 生成带logo二维码，并保存到磁盘
	 * @param content
	 * @param imgPath	logo图片
	 * @param destPath
	 * @param needCompress
	 * @throws Exception
	 */
	public static void encode(String content, String imgPath, String destPath, boolean needCompress) throws Exception {
		BufferedImage image = Qrcode1.createImage(content, imgPath, needCompress);
		mkdirs(destPath);
		String file = new Random().nextInt(99999999) + ".jpg";//生成随机文件名
		ImageIO.write(image, FORMAT_NAME, new File(destPath + "/" + file));
	}
 
	public static void mkdirs(String destPath) { 
		File file = new File(destPath);
		// 当文件夹不存在时，mkdirs会自动创建多层目录，区别于mkdir。(mkdir如果父目录不存在则会抛出异常)
		if (!file.exists() && !file.isDirectory()) {
			file.mkdirs();
		}
	}
 
	public static void encode(String content, String imgPath, String destPath) throws Exception {
		Qrcode1.encode(content, imgPath, destPath, false);
	}//logo路径不为空，但设置生成无logo的二维码
 
	public static void encode(String content, String destPath, boolean needCompress) throws Exception {
		Qrcode1.encode(content, null, destPath, needCompress);
	}//logo路径为空，生成无logo的二维码
 
	public static void encode(String content, String destPath) throws Exception {
		Qrcode1.encode(content, null, destPath, false);
	}//logo路径为空，设置生成无logo的二维码
 
	public static void encode(String content, String imgPath, OutputStream output, boolean needCompress)
			throws Exception {
		BufferedImage image = Qrcode1.createImage(content, imgPath, needCompress);
		ImageIO.write(image, FORMAT_NAME, output);
	}//
 
	public static void encode(String content, OutputStream output) throws Exception {
		Qrcode1.encode(content, null, output, false);
	}//
 
	
	/**
	 * 从二维码中，解析数据
	 * @param file	二维码图片文件
	 * @return	 返回从二维码中解析到的数据值
	 * @throws Exception
	 */
	public static String decode(File file) throws Exception {
		BufferedImage image;
		image = ImageIO.read(file);
		if (image == null) {
			return null;
		}
		BufferedImageLuminanceSource source = new BufferedImageLuminanceSource(image);
		BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));
		Result result;
		Map<EncodeHintType, Object> hints = new HashMap<EncodeHintType, Object>();////
		hints.put(EncodeHintType.CHARACTER_SET, CHARSET);
		result = new MultiFormatReader().decode(bitmap);
		String resultStr = result.getText();
		return resultStr;
	}
 
	public static String decode(String path) throws Exception {
		return Qrcode1.decode(new File(path));
	}
}